from twitchAPI.chat import Chat, EventData, ChatMessage, ChatSub, ChatCommand
from twitchAPI.type import AuthScope, ChatEvent, TwitchAPIException
from twitchAPI.oauth import UserAuthenticator
from twitchAPI.twitch import Twitch
from zapretki import zapretki_list, zapretkalist2
from loguru import logger
import asyncio
import sqlite3
import requests


def get_faceit_stats(faceit_user):
    url = f"https://faceit.lcrypt.eu/?&n={faceit_user}"
    response = requests.get(url)


    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API."

    api = response.json()


    elo = api.get('elo', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ ELO')
    level = api.get('level', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —É—Ä–æ–≤–Ω–µ')

    return f"ELO: {elo}, LVL: {level} | Today -> Win: {api['today']['win']} Lose: {api['today']['lose']} | Elo –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {api['today']['elo']}"



faceit_user = "YOUR_FACEIT_USER"
stats = get_faceit_stats(faceit_user)


twitch = Twitch('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET_ID')  

br_id = "YOUR_BROADCASTER_ID"

mod_id = "YOUR_MODERATOR_ID"

tgk = "YOUR_TELEGRAM_CHANNEL"#OR ANOTHER SOCIAL

#–∫–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–¥
def init_db():
    conn = sqlite3.connect('commands.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS commands (
            command TEXT PRIMARY KEY,
            response TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

#–∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –±–¥
def add_command_to_db(command, response):
    try:
        conn = sqlite3.connect('commands.db')
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO commands (command, response) VALUES (?, ?)', (command, response))
        conn.commit()
        logger.success(f'–ö–æ–º–∞–Ω–¥–∞ {command} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}')
    finally:
        conn.close()

#–∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
def get_response(command):
    conn = sqlite3.connect('commands.db')
    cursor = conn.cursor()
    cursor.execute('SELECT response FROM commands WHERE command = ?', (command,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None 

#–∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–¥
def del_command_from_db(command):
    try:
        conn = sqlite3.connect('commands.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM commands WHERE command = ?', (command.strip(),))
        conn.commit()
        
        if cursor.rowcount > 0:
            logger.success(f'–ö–æ–º–∞–Ω–¥–∞ {command} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        else:
            logger.info(f'–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}')
    finally:
        conn.close()

#–∫–æ–º–∞–Ω–¥–∞ —ç–ª–æ
async def check_elo(chatmes: ChatCommand):
    stats = get_faceit_stats(faceit_user)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ: {stats}")
    await chatmes.reply(f"/me {stats}")

#–∫–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
async def search_sound(chatmes: ChatCommand):
    trek = chatmes.parameter.replace(" ", "%20")
    await chatmes.send(f"/me –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: https://genius.com/search?q={trek}")

#–∫–æ–º–∞–Ω–¥–∞ —Ç–≥
async def telegramm(chatmes: ChatCommand):
    if chatmes.parameter == "":
        await chatmes.send(f"/me {tgk}")
    else:
        lenn = int(chatmes.parameter)
        if chatmes.user.mod or chatmes.user.id == br_id:
            if lenn == 0 or lenn == 1:
                await chatmes.send(f"/me {tgk}")
            elif lenn > 1:
                for i in range(lenn):
                    await chatmes.send(f"/me {tgk}")
            else:
                await chatmes.reply("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞")
        else:
            await chatmes.send(f"/me {tgk}")

#—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞
async def clips(chatmes: ChatMessage):
    if chatmes.text == "!–∫–ª–∏–ø":
        newclip = await twitch.create_clip(broadcaster_id=br_id)
        logger.success(f"–ö–ª–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {chatmes.user.display_name}")
        await chatmes.reply(f"üé• –°–æ–∑–¥–∞–Ω—ã–π –∫–ª–∏–ø: {newclip.edit_url}")

#—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
async def del_command(chatmes: ChatMessage):
    if chatmes.text.startswith('!–¥–µ–ª–∏—Ç '):
        parts = chatmes.text.split(' ', 1)
        if len(parts) == 2 and (chatmes.user.mod or chatmes.user.id == br_id):
            command_name = parts[1]
            del_command_from_db(command_name)
            await chatmes.reply(f'/me –ö–æ–º–∞–Ω–¥–∞ {command_name} —É–¥–∞–ª–µ–Ω–∞.')
            logger.success(f'–ö–æ–º–∞–Ω–¥–∞ {command_name} —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {chatmes.user.display_name}.')


#—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
async def add_command(chatmes: ChatMessage):
    if chatmes.text.startswith('!–¥–∫ '):
        parts = chatmes.text.split(' ', 2)
        if len(parts) == 3 and (chatmes.user.mod or chatmes.user.id == br_id):
            command_name = parts[1]
            response = parts[2]
            add_command_to_db(command_name, response)
            await chatmes.reply(f'/me –ö–æ–º–∞–Ω–¥–∞ {command_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
            logger.success(f'–ö–æ–º–∞–Ω–¥–∞ {command_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {chatmes.user.display_name}.')
            logger.info(f'–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {[get_response(cmd) for cmd in [command_name]]}')
        else:
            await chatmes.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

#—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç –∑–∞–ø—Ä–µ—Ç–æ–∫
async def ban_zapretka(chatmes: ChatMessage):
    sms = chatmes.text.lower()
    for i in zapretkalist2:
        if i == sms :
            if chatmes.user.mod or chatmes.user.id == br_id:
                pass
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chatmes.user.display_name} –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–µ—Ç–∫—É: {chatmes.text}")
                sms = str(chatmes.user.id)
                await twitch.ban_user(broadcaster_id=br_id, moderator_id=mod_id, user_id=sms, reason="–ø–ª–æ—Ö–∞—è —Å–º—Å–∫–∞", duration=1)
                logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chatmes.user.display_name} –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É.")

#—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç –∑–∞–ø—Ä–µ—Ç–æ–∫ 2
async def ban_zapretka2(chatmes: ChatMessage):
    sms = chatmes.text.lower()
    for i in zapretki_list:
        if i in sms:
            if chatmes.user.mod or chatmes.user.id == br_id:
                pass
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chatmes.user.display_name} –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–µ—Ç–∫—É: {chatmes.text}")
                sms = str(chatmes.user.id)
                await twitch.ban_user(broadcaster_id=br_id, moderator_id=mod_id, user_id=sms, reason="–ø–ª–æ—Ö–∞—è —Å–º—Å–∫–∞", duration=1)
                logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chatmes.user.display_name} –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É.")


# —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–Ω–∏—à –¥–ª—è —é–∑–µ—Ä–∞
async def vanishmessageforuser(chatmes: ChatCommand):
    if chatmes.user.mod or chatmes.user.id == br_id:
        pass
    else:
        await twitch.ban_user(broadcaster_id=br_id, moderator_id=mod_id, user_id=chatmes.user.id, reason="–≤–∞–Ω–∏—à", duration=1)
        logger.success(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chatmes.user.display_name} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")


#—Ñ—É–Ω–∫—Ü–∏—è –≤–∞–Ω–∏—à–∞ –¥–ª—è –º–æ–¥–µ—Ä–æ–≤
async def vanishmessageformod(chatmes: ChatMessage):
    if chatmes.text.startswith('!–≤ '):
        if chatmes.user.mod or chatmes.user.id == br_id:
            username = chatmes.text.split(' ')[1].lstrip('@')
            async for user_data in twitch.get_users(logins=[username]):
                if user_data:
                    user_idd = user_data.id
                    await twitch.ban_user(broadcaster_id=br_id, moderator_id=mod_id, user_id=user_idd, reason="–≤–∞–Ω–∏—à", duration=1)
                    logger.success(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {chatmes.user.display_name}.")
                    return
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chatmes.user.display_name} –Ω–µ –∏–º–µ–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞.")


#—Ñ—É–Ω–∫—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
async def on_ready(ready_event: EventData):
    await ready_event.chat.join_room("YOUR_CHANNEL_NAME")
    logger.success("–ë–û–¢ –ì–û–¢–û–í")


#—Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
async def on_message(chatmes: ChatMessage):
    await ban_zapretka(chatmes)
    await ban_zapretka2(chatmes)
    await vanishmessageformod(chatmes)
    await add_command(chatmes)
    await del_command(chatmes)

    response = get_response(chatmes.text)

    if response:
        await chatmes.reply(response)

#—Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ 
async def run_bot():
    init_db()
    target_scope = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT, AuthScope.CHANNEL_MANAGE_BROADCAST, AuthScope.MODERATOR_MANAGE_BANNED_USERS, AuthScope.CLIPS_EDIT]
    auth = UserAuthenticator(twitch, target_scope, force_verify=False)
    token, refresh_token = await auth.authenticate()
    await twitch.set_user_authentication(token, target_scope, refresh_token)
    chat = await Chat(twitch)

    chat.register_event(ChatEvent.READY, on_ready)
    chat.register_command("—Ç–≥", telegramm)
    chat.register_command("–≤–∞–Ω–∏—à", vanishmessageforuser)
    chat.register_command("–ø–æ–∏—Å–∫", search_sound)
    chat.register_command("—ç–ª–æ", check_elo)
    chat.register_event(ChatEvent.MESSAGE, on_message)

    chat.start()

    try:
        input("press ENTER to stop")
    finally:
        chat.stop()
        await twitch.close()

asyncio.run(run_bot())